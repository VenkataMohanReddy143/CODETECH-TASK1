import java.util.*;
import java.io.*;

// Models
class Account {
    private int accountNumber;
    private String accountHolderName;
    private double balance;
    private List<String> transactionHistory;

    public Account(int accountNumber, String accountHolderName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolderName = accountHolderName;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
        addTransaction("Account created with initial balance: " + initialBalance);
    }

    // Getters and setters
    public int getAccountNumber() { return accountNumber; }
    public String getAccountHolderName() { return accountHolderName; }
    public double getBalance() { return balance; }
    public List<String> getTransactionHistory() { return transactionHistory; }

    public void deposit(double amount) {
        balance += amount;
        addTransaction("Deposited: " + amount);
    }

    public void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            addTransaction("Withdrew: " + amount);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void transfer(Account toAccount, double amount) {
        if (balance >= amount) {
            balance -= amount;
            toAccount.deposit(amount);
            addTransaction("Transferred: " + amount + " to account " + toAccount.getAccountNumber());
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    private void addTransaction(String transaction) {
        transactionHistory.add(transaction);
    }
}

// Services
class BankingService {
    private Map<Integer, Account> accounts = new HashMap<>();

    public void createAccount(int accountNumber, String accountHolderName, double initialBalance) {
        Account account = new Account(accountNumber, accountHolderName, initialBalance);
        accounts.put(accountNumber, account);
        System.out.println("Account created successfully!");
    }

    public void deposit(int accountNumber, double amount) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.deposit(amount);
            System.out.println("Amount deposited successfully!");
        } else {
            System.out.println("Account not found.");
        }
    }

    public void withdraw(int accountNumber, double amount) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            account.withdraw(amount);
            System.out.println("Amount withdrawn successfully!");
        } else {
            System.out.println("Account not found.");
        }
    }

    public void transfer(int fromAccountNumber, int toAccountNumber, double amount) {
        Account fromAccount = accounts.get(fromAccountNumber);
        Account toAccount = accounts.get(toAccountNumber);
        if (fromAccount != null && toAccount != null) {
            fromAccount.transfer(toAccount, amount);
            System.out.println("Amount transferred successfully!");
        } else {
            System.out.println("One or both accounts not found.");
        }
    }

    public void viewTransactionHistory(int accountNumber) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            System.out.println("Transaction history for account " + accountNumber + ":");
            for (String transaction : account.getTransactionHistory()) {
                System.out.println(transaction);
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    public void managePersonalInformation(int accountNumber, String newAccountHolderName) {
        Account account = accounts.get(accountNumber);
        if (account != null) {
            account = new Account(accountNumber, newAccountHolderName, account.getBalance());
            accounts.put(accountNumber, account);
            System.out.println("Personal information updated successfully!");
        } else {
            System.out.println("Account not found.");
        }
    }
}

// User Interface
class BankingUI {
    private BankingService bankingService = new BankingService();
    private Scanner scanner = new Scanner(System.in);

    public void displayMenu() {
        while (true) {
            System.out.println("\n*** Online Banking System ***");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer");
            System.out.println("5. View Transaction History");
            System.out.println("6. Manage Personal Information");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    createAccount();
                    break;
                case 2:
                    deposit();
                    break;
                case 3:
                    withdraw();
                    break;
                case 4:
                    transfer();
                    break;
                case 5:
                    viewTransactionHistory();
                    break;
                case 6:
                    managePersonalInformation();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private void createAccount() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter account holder name: ");
        String accountHolderName = scanner.nextLine();
        System.out.print("Enter initial balance: ");
        double initialBalance = scanner.nextDouble();
        bankingService.createAccount(accountNumber, accountHolderName, initialBalance);
    }

    private void deposit() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        System.out.print("Enter amount to deposit: ");
        double amount = scanner.nextDouble();
        bankingService.deposit(accountNumber, amount);
    }

    private void withdraw() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        System.out.print("Enter amount to withdraw: ");
        double amount = scanner.nextDouble();
        bankingService.withdraw(accountNumber, amount);
    }

    private void transfer() {
        System.out.print("Enter your account number: ");
        int fromAccountNumber = scanner.nextInt();
        System.out.print("Enter recipient's account number: ");
        int toAccountNumber = scanner.nextInt();
        System.out.print("Enter amount to transfer: ");
        double amount = scanner.nextDouble();
        bankingService.transfer(fromAccountNumber, toAccountNumber, amount);
    }

    private void viewTransactionHistory() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        bankingService.viewTransactionHistory(accountNumber);
    }

    private void managePersonalInformation() {
        System.out.print("Enter account number: ");
        int accountNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter new account holder name: ");
        String newAccountHolderName = scanner.nextLine();
        bankingService.managePersonalInformation(accountNumber, newAccountHolderName);
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        BankingUI bankingUI = new BankingUI();
        bankingUI.displayMenu();
    }
}
